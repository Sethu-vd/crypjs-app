{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["layout","labelCol","span","wrapperCol","App","Option","Select","Header","Layout","TabPane","Tabs","useState","keys","setKeys","Form","useForm","form","encryptData","hashKey","data","CryptoJS","AES","encrypt","JSON","stringify","toString","useEffect","temp","parse","localStorage","getItem","setFieldsValue","defaultActiveKey","size","style","marginBottom","tab","backgroundColor","name","onFinish","values","type","console","log","bytes","decrypt","enc","Utf8","decryptData","Item","label","placeholder","allowClear","defaultValue","width","value","map","item","rules","required","TextArea","autoSize","minRows","maxRows","offset","htmlType","setItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8836d24f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Form, Input, Button, Select, Layout, Tabs } from \"antd\";\nimport CryptoJS from \"crypto-js\";\nimport \"antd/dist/antd.css\";\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 10 },\n};\n\n// [\n//   { \"name\": \"CSR QA\", \"value\": \"0fb1a0a622e86284948a568bccd0b1037f9428c9c519957f6fcab9d44e890280\" },\n//   { \"name\": \"CSR Stage\", \"value\": \"0fb1a0a622e86284948a468bccd0b1037f9428c9c519957f6fcab9d44e890280\" }\n// ]\n\nfunction App() {\n  const { Option } = Select;\n  const { Header } = Layout;\n  const { TabPane } = Tabs;\n  const [keys, setKeys] = useState([]);\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    const temp = JSON.parse(localStorage.getItem(\"keys\")) ?? [];\n\n    form.setFieldsValue({ keys: JSON.stringify(temp) });\n    setKeys(temp);\n  }, [form]);\n\n  const onFinish = (values) => {\n    const { data, hashKey, type } = values;\n\n    if (type === \"encrypt\") {\n      console.log(\"Encrypted\");\n      console.log(\n        JSON.stringify({\n          data: encryptData(hashKey, data),\n        })\n      );\n    } else {\n      console.log(\"Decrypted\", decryptData(hashKey, JSON.parse(data)?.data));\n    }\n  };\n\n  const onSaveLocalStorage = (values) => {\n    const { keys } = values;\n    localStorage.setItem(\"keys\", JSON.stringify(JSON.parse(keys)));\n    setKeys(JSON.parse(keys));\n    console.log(\"Keys Saved\");\n  };\n  function encryptData(hashKey, data) {\n    return CryptoJS.AES.encrypt(JSON.stringify(data), hashKey).toString();\n  }\n\n  function decryptData(hashKey, data) {\n    const bytes = CryptoJS.AES.decrypt(data, hashKey);\n    return JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n  }\n\n  return (\n    <Layout>\n      <Tabs defaultActiveKey=\"1\" size={\"large\"} style={{ marginBottom: 32 }}>\n        <TabPane\n          tab={\n            <Header style={{ backgroundColor: \"grey\" }}>\n              Encrypt & Decrypt\n            </Header>\n          }\n          key=\"1\"\n        >\n          <Form {...layout} name=\"nest-messages\" onFinish={onFinish}>\n            <Form.Item name={[\"type\"]} label=\"Type\">\n              <Select\n                placeholder=\"Select a option and change input text above\"\n                allowClear\n                defaultValue=\"decrypt\"\n                style={{ width: 120 }}\n              >\n                <Option value=\"decrypt\">Decrypt</Option>\n                <Option value=\"encrypt\">Encrypt</Option>\n              </Select>\n            </Form.Item>\n            <Form.Item name={[\"hashKey\"]} label=\"Hash Key\">\n              <Select\n                placeholder=\"Select a option and change input text above\"\n                allowClear\n                style={{ width: 120 }}\n              >\n                {keys.map((item) => (\n                  <Option key={item.value} value={item.value}>\n                    {item.name}\n                  </Option>\n                ))}\n              </Select>\n            </Form.Item>\n            <Form.Item\n              name={[\"data\"]}\n              label=\"Data\"\n              rules={[{ required: true }]}\n            >\n              <Input.TextArea autoSize={{ minRows: 10, maxRows: 16 }} />\n            </Form.Item>\n            <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\n              <Button type=\"primary\" htmlType=\"submit\">\n                Submit\n              </Button>\n            </Form.Item>\n          </Form>\n        </TabPane>\n        <TabPane\n          tab={\n            <Header style={{ backgroundColor: \"grey\" }}>Add hashKeys</Header>\n          }\n          key=\"2\"\n        >\n          <Form form={form} {...layout} onFinish={onSaveLocalStorage}>\n            <Form.Item\n              name={[\"keys\"]}\n              label=\"Keys JSON\"\n              rules={[{ required: true }]}\n            >\n              <Input.TextArea autoSize={{ minRows: 10, maxRows: 16 }} />\n            </Form.Item>\n            <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\n              <Button type=\"primary\" htmlType=\"submit\">\n                Submit\n              </Button>\n            </Form.Item>\n          </Form>\n        </TabPane>\n      </Tabs>\n    </Layout>\n  );\n  // return <div className=\"App\">App</div>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}